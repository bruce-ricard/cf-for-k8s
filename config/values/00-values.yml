#@data/values
---
#! your system domain, e.g., "system.cf.example.com"
system_domain:
#! list of app domains, e.g., ["apps.cf.example.com"]
app_domains: []

#! password for admin user in plain text
cf_admin_password:

#! reserved static ip for istio LoadBalancer
istio_static_ip: ""

system_certificate:
  #! Base64-encoded certificate for the wildcard
  #! subdomain of the system domain (e.g., CN=*.system.cf.example.com)
  crt: ""
  #! Base64-encoded private key for the system certificate
  key: ""
  #! Base64-encoded CA certificate used to sign the system certifcate
  ca: ""

workloads_certificate:
  #! Base64-encoded certificate for the wildcard
  #! subdomain of the system domain (e.g., CN=*.apps.cf.example.com)
  crt: ""
  #! Base64-encoded private key for the workloads certificate
  key: ""
  #! Base64-encoded CA certificate used to sign the workloads certifcate
  ca: ""

#! When true, automatically upgrades incoming HTTP connections to HTTPS
gateway:
  https_only: true

capi:
  database:
    #! or mysql2, as needed
    adapter: postgres
    encryption_key: ""
    host: ""
    port: 5432
    user: cloud_controller
    #! DB user password in plain text
    password: ""
    name: cloud_controller
    #! Plain text ca certificate if tls should be used
    ca_cert: ""
  scale:
    cf_api_server:
      replicas: 2
      cf_api_server:
        requests:
          mem: 300Mi
          cpu: 500m
        limits:
          mem: 1.2Gi
          cpu: 1000m
      cf_api_local_worker:
        requests:
          mem: 300Mi
          cpu: 100m
        limits:
          mem: 1.2Gi
          cpu: 500m
      nginx:
        requests:
          mem: 300Mi
          cpu: 100m
        limits:
          mem: 1Gi
          cpu: 500m
      statsd:
        requests:
          mem: 300Mi
          cpu: 100m
        limits:
          mem: 1Gi
          cpu: 500m
    cf_api_clock:
      replicas: 1
      cf_api_clock:
        requests:
          mem: 300Mi
          cpu: 300m
        limits:
          mem: 1Gi
          cpu: 600m
    cf_api_controllers:
      replicas: 1
      cf_api_controllers:
        requests:
          mem: 50Mi
          cpu: 100m
        limits:
          mem: 200Mi
          cpu: 100m
    cf_api_deployment_updater:
      replicas: 1
      cf_api_deployment_updater:
        requests:
          mem: 300Mi
          cpu: 300m
        limits:
          mem: 1Gi
          cpu: 500m
    cf_api_worker:
      replicas: 1
      cf_api_worker:
        requests:
          mem: 300Mi
          cpu: 100m
        limits:
          mem: 1Gi
          cpu: 500m

eirini:
  scale:
    eirini:
      replicas: 1
      eirini:
        requests:
          mem: 20Mi
          cpu: 20m
        limits:
          mem: 100Mi
          cpu: 100m
    eirini_controller:
      replicas: 1
      eirini_controller:
        requests:
          mem: 15Mi
          cpu: 15m
        limits:
          mem: 200Mi
          cpu: 100m
    eirini_events:
      replicas: 1
      eirini_events:
        requests:
          mem: 15Mi
          cpu: 15m
        limits:
          mem: 100Mi
          cpu: 100m
    eirini_task_reporter:
      replicas: 1
      eirini_task_reporter:
        requests:
          mem: 15Mi
          cpu: 15m
        limits:
          mem: 100Mi
          cpu: 100m

kpack:
  scale:
    kpack_controller:
      replicas: 1
      kpack_controller:
        requests:
          mem: 50Mi
          cpu: 10m
        limits:
          mem: 200Mi
          cpu: 100m
    kpack_webhook:
      replicas: 1
      kpack_webhook:
        requests:
          mem: 50Mi
          cpu: 10m
        limits:
          mem: 200Mi
          cpu: 100m

fluentd:
  scale:
    fluentd:
      fluentd:
        requests:
          mem: 150Mi
          cpu: 10m
        limits:
          mem: 500Mi
          cpu: 100m

log_cache:
  scale:
    log_cache:
      replicas: 1
      log_cache:
        requests:
          mem: 200Mi
          cpu: 15m
        limits:
          mem: 500Mi
          cpu: 100m
      cf_auth_proxy:
        requests:
          mem: 100Mi
          cpu: 15m
        limits:
          mem: 200Mi
          cpu: 100m
      syslog_server:
        requests:
          mem: 100Mi
          cpu: 15m
        limits:
          mem: 200Mi
          cpu: 100m
      gateway:
        requests:
          mem: 100Mi
          cpu: 15m
        limits:
          mem: 200Mi
          cpu: 100m

metric_proxy:
  scale:
    metric_proxy:
      replicas: 1
      metric_proxy:
        requests:
          mem: 100Mi
          cpu: 15m
        limits:
          mem: 200Mi
          cpu: 100m

istio:
  scale:
    istio_ingressgateway:
      istio_proxy:
        requests:
          mem: 128Mi
          cpu: 100m
        limits:
          mem: 1Gi
          cpu: 2
    istiod:
      replicas: 1
      discovery:
        requests:
          mem: 2Gi
          cpu: 500m
        limits:
          mem: 5Gi
          cpu: 2

networking:
  scale:
    routecontroller:
      replicas: 1
      routecontroller:
        requests:
          mem: 20Mi
          cpu: 100m
        limits:
          mem: 10Gi
          cpu: 100m

uaa:
  database:
    #! or mysql2, as needed
    adapter: postgresql
    host: ""
    port: 5432
    user: uaa
    #! DB user password in plain text
    password: ""
    name: uaa
    #! Plain text ca certificate for tls
    ca_cert: ""
  scale:
    uaa:
      replicas: 1
      uaa:
        requests:
          mem: 512Mi
          cpu: 50m
        limits:
          mem: 2Gi
          cpu: 500m
      statsd_exporter:
        requests:
          mem: 10Mi
          cpu: 10m
        limits:
          mem: 100Mi
          cpu: 100m

app_registry:
  hostname: ""
  repository_prefix: ""
  username: ""
  password: ""

remove_resource_requirements: false
add_metrics_server_components: false
enable_load_balancer: true
use_external_dns_for_wildcard: false
enable_automount_service_account_token: false
metrics_server_prefer_internal_kubelet_address: false
use_first_party_jwt_tokens: false

#! configuration for the CF blobstore
blobstore:
  endpoint: "http://cf-blobstore-minio.cf-blobstore.svc.cluster.local:9000"
  region: "''"
  access_key_id: "admin"
  secret_access_key: ""
  package_directory_key: "cc-packages"
  droplet_directory_key: "cc-droplets"
  resource_directory_key: "cc-resources"
  buildpack_directory_key: "cc-buildpacks"
  aws_signature_version: "2"
